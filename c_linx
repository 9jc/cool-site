### **Exercise 3: Rabin-Miller Primality Test (C)**

```c
#include<stdio.h>
#include <stdlib.h>
#include <time.h>

int power(int x, unsigned int y, int p) 
{
    int res = 1;
    x = x % p;
    while (y > 0) 
    {
        if (y & 1)
            res = (res * x) % p;
        y = y >> 1;
        x = (x * x) % p;
    }
    return res;
}

int millerTest(int d, int n) 
{
    int a = rand() % (n - 4) + 2;  // Random number between 2 and n-2
    int x = power(a, d, n);
    if (x == 1 || x == n - 1)
        return 1;

    while (d != n - 1) 
    {
        x = (x * x) % n;
        d *= 2;

        if (x == 1) return 0;
        if (x == n - 1) return 1;
    }
    return 0;
}

int IsPrime(int n, int k) 
{
    int d, i;

    if (n <= 1 || n == 4) return 0;
    if (n <= 3) return 1;

    d = n - 1;
    while (d % 2 == 0)
        d /= 2;

    for (i = 0; i < k; i++)
        if (!millerTest(d, n))
            return 0;

    return 1;
}

int main() 
{
    int k = 4;  // Number of iterations for testing
    int n;

    printf("Enter the number: ");
    scanf("%d", &n);

    // Seed the random number generator
    srand(time(NULL));

    if (IsPrime(n, k))
        printf("Given number is Prime\n");
    else
        printf("Given number is not Prime\n");

    return 0;
}
```

### Changes:
- Replaced `getch()` with standard `return 0` as it's not available in Linux.
- Removed `conio.h` since it's not compatible with Linux.
- Added `srand(time(NULL))` to seed the random number generator for better randomness.

---

### **Exercise 4: Euclid's GCD Algorithm (C)**

```c
#include<stdio.h>

int gcd(int a, int b)
{
    if (a == 0)
        return b;
    return gcd(b % a, a);
}

int main()
{
    int a[10], i, result;

    for (i = 0; i < 10; i++)
    {
        printf("Enter the %d term: ", i + 1);
        scanf("%d", &a[i]);

        if (i == 0)
            result = a[0];
        result = gcd(result, a[i]);
    }

    printf("The GCD of the Numbers is %d\n", result);

    return 0;
}
```
